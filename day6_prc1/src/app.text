////////////////////// method 1


import {useState} from "react";


export const Form = () => {

const [formData,setFormData] = useState({
    username : "",
    age:""
})

const handleChange =(e) =>{
    console.log(e.target.id)
    // if(e.target.id === "username"){
    //     setFormData({
    //         ...formData,
    //         username:e.target.value
    //     })
    // }
    // if(e.target.id === "age"){
    //     setFormData({
    //         ...formData,
    //         username:e.target.value
    //     })
    // }
    //OR
    // setFormData({
    //             ...formData,
    //             [e.target.id]:e.target.value
    //         })
   //OR
const  { id,value }  = e.target;
   setFormData({
    ...formData,
    [id] :value
})


}
const handleSubmit =(e) =>{
    e.preventDefault();
    console.log(formData);
    fetch("http://localhost:8080/forms", {
            method: "POST",
            headers: {
              "content-type": "application/json",
            },
            body: JSON.stringify(formData),
          })
}

  return (
    <form  onSubmit={handleSubmit}>
      <input 
      onChange={handleChange}
      value = {formData.username}
      type="text" 
      placeholder="Enter Username" 
      id = "username"
      />

      <input 
      onChange={handleChange}
      value = {formData.age}
      type="number" 
      placeholder="Enter Age" 
      id="age"
      />
      
      <input type="submit" value="submit" />

    </form>
  );
};

///////////method 2
form.jsx
 
import {useState} from "react";


export const Form = () => {

const [formData,setFormData] = useState({
    username : "",
    age:""
})

const handleChange =(e) =>{
    console.log(e.target.id)
    // if(e.target.id === "username"){
    //     setFormData({
    //         ...formData,
    //         username:e.target.value
    //     })
    // }
    // if(e.target.id === "age"){
    //     setFormData({
    //         ...formData,
    //         username:e.target.value
    //     })
    // }
    //OR
    // setFormData({
    //             ...formData,
    //             [e.target.id]:e.target.value
    //         })
   //OR
const  { id,value }  = e.target;
   setFormData({
    ...formData,
    [id] :value
})


}
const handleSubmit =(e) =>{
    e.preventDefault();
    console.log(formData);
    fetch("http://localhost:8080/forms",{
            method: "POST",
            headers: {
              "content-type": "application/json",
            },
            body: JSON.stringify(formData),
          })
}

  return (
    <form  onSubmit={handleSubmit}>
      <input 
      onChange={handleChange}
      value = {formData.username}
      type="text" 
      placeholder="Enter Username" 
      id = "username"
      />

      <input 
      onChange={handleChange}
      value = {formData.age}
      type="number" 
      placeholder="Enter Age" 
      id="age"
      />
      
      <input type="submit" value="submit" />

    </form>
  );
};



///////////////////////// method3


app.jsx


import logo from './logo.svg';
import './App.css';
import { useRef, useState } from 'react';
import { Form } from "./components/Form"
function App() {
  const [counter, setCounter] = useState(0);
  const ref = useRef(10);  //always gives an object {current:10}

  // let x =1;    instead of this we use ref
  // console.log("x is initially ",x)
  console.log("x is initially ",ref)


  
  return (
    <div className="App">
      {/* <Form /> */}
    <h3>counter:{counter}</h3>
    <button onClick={()=>{
      setCounter(counter+1)
    }}> change counter</button>

<button onClick={()=>{
      // x=x+1
      // console.log("x is changed",x)  //but by this when setcounter is called we loss the value 
        
      //instead of this we use ref here            //and if we do not want to loss the value
             ref.current+=1;
             console.log("x is changed ",ref)                               //we need to use ref here
    }}> change x</button>


    </div>
  );
}

export default App;


//1. store the value, and do not lose it, when component is re-rendering.
//2. change in this value, should not cause re-render.



//////////////////method 4


app.jsx

import logo from './logo.svg';
import './App.css';
import { useEffect, useRef, useState } from 'react';
import { Form } from "./components/Form"
function App() {
  const [counter, setCounter] = useState(0);
  const counterRef = useRef(null); //{current:null}
 
 useEffect(()=>{
  counterRef.current  = setInterval(()=>{
    setCounter((p)=>p+1);   
  },1000)

},[])
  return (
    <div className="App">
      {/* <Form /> */}
    <h3>counter:{counter}</h3>

    <button onClick={()=>{
      clearInterval(counterRef.current)
    }}>pause</button>
 



    </div>
  );
}

export default App;


//1. store the value, and do not lose it, when component is re-rendering.
//2. change in this value, should not cause re-render.


////////////////////////////method 5 


app.jsx


import logo from './logo.svg';
import './App.css';
import { useEffect, useRef, useState } from 'react';
import { Form } from "./components/Form"
function App() {
  const [counter, setCounter] = useState(0);
  const counterRef = useRef(null); //{current:null}
 
 useEffect(()=>{
  startInterval();

},[])

const startInterval = ()=>{
  counterRef.current  = setInterval(()=>{
    setCounter((p)=>p+1);   
  },100)
}



  return (
    <div className="App">
      {/* <Form /> */}
    <h3>counter:{counter}</h3>

    <button onClick={()=>{
      clearInterval(counterRef.current)
    }}>pause</button>
    
    <button onClick={()=>{
      startInterval();
    }}>start</button>

<button onClick={()=>{
            clearInterval(counterRef.current)

      setCounter(0)
    }}>reset</button>


    </div>
  );
}

export default App;


//1. store the value, and do not lose it, when component is re-rendering.
//2. change in this value, should not cause re-render.


////////////////////////////method 6


app.jsx

import logo from './logo.svg';
import './App.css';
import { useEffect, useRef, useState } from 'react';
import { Form } from "./components/Form"
function App() {
  const [counter, setCounter] = useState(0);
  const counterRef = useRef(null); //{current:null}

  const divRef= useRef(null);
 
 useEffect(()=>{

},[])




  return (
    <div ref = {divRef} className="App">
      {/* <Form /> */}
    <h3 >counter:{counter}</h3>
    <div className='longred'>1st</div>
    <div className='longblue'>2nd</div>
    <div className='longred'>3rd</div>
    <div className='longblue'>4th</div>
    <div className='longred'>5th</div>
    <button
    onClick={()=>{
      divRef.current.scrollIntoView({
        behavior:"smooth"
      });
      //oR
      // divRef.current.innerHTML = "test";
    }}
    >Scroll to top</button>
   
   <button onClick={()=>{
     console.log(divRef.current)
   }}
    >button</button>


    </div>
  );
}

export default App;


//1. store the value, and do not lose it, when component is re-rendering.
//2. change in this value, should not cause re-render.